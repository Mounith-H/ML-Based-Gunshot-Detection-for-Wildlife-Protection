# == DO NOT EDIT THE FOLLOWING LINES for the Raspberry Pi Pico VS Code Extension to work ==
if(WIN32)
    set(USERHOME $ENV{USERPROFILE})
else()
    set(USERHOME $ENV{HOME})
endif()
set(sdkVersion 2.1.1)
set(toolchainVersion 14_2_Rel1)
set(picotoolVersion 2.1.1)
set(picoVscode ${USERHOME}/.pico-sdk/cmake/pico-vscode.cmake)
if (EXISTS ${picoVscode})
    include(${picoVscode})
endif()
# ====================================================================================
set(PICO_BOARD pico CACHE STRING "Board type")

cmake_minimum_required(VERSION 3.13)

# Pull in SDK (must be before project)
include(pico_sdk_import.cmake)

# Set up project
project(gunshot_detector C CXX ASM)
set(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_STANDARD 17)

# Initialize the Pico SDK
pico_sdk_init()

# Add main executable first
add_executable(gunshot_detector
    Raspberry_pi_pico.cpp
    model_handler.c
    gps_handler.cpp
)

# Generate PIO header
pico_generate_pio_header(gunshot_detector ${CMAKE_CURRENT_LIST_DIR}/inmp441.pio)

# Add minmea library
add_library(minmea STATIC
    ${CMAKE_CURRENT_SOURCE_DIR}/lib/minmea/minmea.c
)

# Set up include paths for minmea
target_include_directories(minmea PRIVATE
    ${CMAKE_CURRENT_LIST_DIR}
    ${CMAKE_CURRENT_SOURCE_DIR}/lib/minmea
)

# Set compile definitions for minmea
target_compile_definitions(minmea PRIVATE
    HAVE_TIME_H
    HAS_SYSTEM_TIME_H
)

# Set up include paths for main executable
target_include_directories(gunshot_detector PRIVATE
    ${CMAKE_CURRENT_LIST_DIR}
    ${CMAKE_CURRENT_SOURCE_DIR}/lib
    ${CMAKE_CURRENT_SOURCE_DIR}/lib/minmea
)

# Link all libraries
target_link_libraries(gunshot_detector
    pico_stdlib
    pico_multicore
    hardware_dma
    hardware_pio 
    hardware_gpio
    hardware_spi
    hardware_uart
    minmea
)

# Configure UART/USB settings and generate output files
pico_enable_stdio_uart(gunshot_detector 1)  # Enable UART for printf
pico_enable_stdio_usb(gunshot_detector 0)   # Disable USB
pico_add_extra_outputs(gunshot_detector)     # Generate bin/hex/uf2 files
